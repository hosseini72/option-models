import yfinance as yf
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from datetime import date
import scipy.stats as si
import plotly.graph_objects as pgo
import sys
import subprocess 
'''
Option price modeling 
By Seyyed Mahmoud Hosseini 
University of Westminster
'''


def iso_enquiry():
    '''
    This function asks about symbol to analysing.
    '''
    iso='ETH-USD'
    try:
        print('Please pay attention, default crypto is "ETH-USD"')
#         iso = input('Please either enter the iso of your desired crypto to analyse or "exit" to terminate. otherwise "ETH-USD" as default crypto will be assessed.:')
        print(iso == '')
    except:
        iso='ETH-USD'
    print(iso)
    if iso == '':
        iso= 'eth-usd'
    
    return iso.upper()






def ingest(iso, duration = 2):
    '''
    This function retrive data from yahoo finance. The iso is being asked and store in a global variable
    '''
    print(iso)
    # today = date.today()
    today = date(2022,11,29)
    start_date = today.replace(year=today.year-duration)
    print(f'Duration : {start_date} to {today}')

    initial_data =  yf.download(iso, start=start_date, end=today)
    try:
        subprocess.check_call([sys.executable, '-m', 'pip', 'install', 'plotly'])        # plotting all candlestick chart
        fig = pgo.Figure( data =
                    [
                        pgo.Candlestick(
                            x= initial_data.index,
                            low = initial_data['Low'],
                            high = initial_data['High'],
                            open = initial_data['Open'],
                            close = initial_data['Close'],
                            increasing_line_color = 'green',
                            decreasing_line_color = 'red'
                        )
                    ])
        fig.update_layout(
            title = iso,
            yaxis_title = 'Price(USD)',
            xaxis_title = 'Date'
        )
        fig.show()
    except:
        print('To see the candlestick chart of price please install potly using command: " pip install plotly"')


    
    return initial_data

def preprocessing():
    iso = iso_enquiry()
    initial_data = ingest(iso)


    log_return = np.log(initial_data['Adj Close'] / initial_data['Adj Close'].shift(1))
    vol =  np.sqrt(365) * log_return.std()
    spot_price = round(initial_data.iloc[-1].loc['Adj Close'],2)
    data = dict(
        spot_price = spot_price,    # spot stock price
        strike = spot_price - spot_price * 0.05,                 # strike
        maturity = 0.25,                                         # maturity  is chosen 3 months 
        risk_free_rate =  0.036,                                 # risk free rate  is chosen 10 years  US Treasury Rate
        sigma = vol,                                             # diffusion coefficient or volatility
        time_step = 5 ,                                          # number of periods or number of time steps 
        payoff = 'Put'                                           # payoff 
        )
    payoff =data['payoff']
    strike = round(data['strike'],2)
    print(f'For {iso} based on analyses {payoff} has been chosen.\nThe risk free rate is 3.6% (10 years  US Treasury Rate).\nAnnual volatility is {round(vol*100,2)}%.\nTime step is 5.\nlast price is {spot_price}.\nStrike is  {strike}.\n\n')
    print('Log Return plot:\n')
    plt.plot(log_return)
    plt.xlabel('Date')
    plt.legend(['Log Return'])
    plt.show()
    return data





    

###############################################################
# binomial tree model
###############################################################

def binomial_tree(spot_price,strike,maturity,risk_free_rate,sigma,time_step,payoff):
   

    # Step one, Creating Binomial Tree
    delta_T = float(maturity) / time_step                   # Delta time  shows intervals which each movement through tree is based on it 
    '''
    In Binominal Tree Model the two outcomes are a move up, or a move down per step of tree. 
    in each step in binomial tree the price increases as equal as Up factor. So, next up price in tree is S1 = S0 * up_factor and up_factor >= 0
    in each step in binomial tree the price decreses as equal as down factor. So, next up price in tree is S1 = S0 * down_factor and down_factor >= 0
    up and down factor are calculated as below
    '''
    up_factor = np.exp(sigma * np.sqrt(delta_T))            # up factor
    down_factor = 1.0 / up_factor                           # down factor 
    '''
    price_tree_array is a two dimension squre [(time_step+1)*(time_step+1)] elements which prices of each node is produced based on up and down factor and stroed in it.
    '''
    price_tree_array = np.zeros((time_step + 1, time_step + 1))           
    price_tree_array[0, 0] = spot_price
    counter = 1
    for col in range(1, time_step + 1):                              
        for row in range(counter):
            price_tree_array[row, col] = price_tree_array[row, col-1] * up_factor
            price_tree_array[row+1, col] = price_tree_array[row, col-1] * down_factor
        counter += 1
    
    risk_free_compound_rtrun = np.exp(risk_free_rate * delta_T)                                             # risk free compound return
    risk_neutral_up_probability = (risk_free_compound_rtrun- down_factor)/ (up_factor - down_factor)        # risk neutral up probability
    risk_neutral_down_probability = 1.0 - risk_neutral_up_probability                                       # risk neutral down probability
    
    
    # Step two: finding option value at each final node
    '''
    In this block last node makes a view of last coloum of  price_tree_array to calculate the values of final nodes in call and put option seperatly
    '''
    final_nodes_array = price_tree_array[:,-1]                                                                                           
    node_values = np.zeros((time_step + 1, time_step + 1))                                                               
    if payoff =="Call":
        node_values[:,-1] = np.maximum(final_nodes_array - strike, 0.0)
    elif payoff =="Put":
        node_values[:,-1] = np.maximum(strike- final_nodes_array, 0.0)

    #Step Three: 
    # for European Option
    for j in range(time_step-1, -1, -1):
        for i in range(j+1):
            node_values[i,j] = np.exp(-risk_free_rate * delta_T) * (risk_neutral_up_probability * node_values[i,j + 1] + risk_neutral_down_probability * node_values[i + 1,j + 1])
    European_value = round(node_values[0,0],2)

    # for American Option
    if payoff =="Call":
        for j in range(time_step - 1, -1, -1):
            for i in range(j+1):
                node_values[i,j] = np.maximum(price_tree_array[i,j] - strike, np.exp(-risk_free_rate * delta_T) * (risk_neutral_up_probability * node_values[i,j + 1] + risk_neutral_down_probability * node_values[i + 1,j + 1]))
    elif payoff =="Put":
        for j in range(time_step - 1, -1, -1):
            for i in range(j+1):
                node_values[i,j] = np.maximum(strike - price_tree_array[i,j],np.exp(-risk_free_rate * delta_T) * (risk_neutral_up_probability * node_values[i,j + 1] + risk_neutral_down_probability * node_values[i + 1,j + 1]))

    # print(node_values)
    American_value = round(node_values[0,0],2)

    return American_value, European_value


###############################################################
# Monte Carlo Simulation                                      #  
###############################################################

def mcs_simulation_np(spot_price,strike,maturity,risk_free_rate,sigma,time_step, payoff, **kwargs):  

    M = 90                # time_step 
    I = 10000             # it runs simulation for 1000 times     
    delta_T = maturity / M 
    S = np.zeros((M + 1, I))
    S[0] = spot_price 
    rn = np.random.standard_normal(S.shape) 
    for t in range(1, M + 1):   
        S[t] = S[t-1] * np.exp((risk_free_rate - sigma ** 2 / 2) * delta_T + sigma * np.sqrt(delta_T) * rn[t]) 
    
    # S = np.transpose(S)

    #European put
    european_put = np.mean(np.maximum(strike - S[:,-1],0))
    print('e p', european_put)
    # European call
    european_call = np.mean(np.maximum(S[:,-1] - strike,0))

    return european_call,european_put, S

    # ploting Monte Carlo Simulation 
def run_mcs_dist(S):
    n, bins, patches = plt.hist(x=S[:,-1], bins='auto', color='#0504aa',alpha=0.7, rwidth=0.85)

    plt.grid(axis='y', alpha=0.75)
    plt.xlabel('S_T')
    plt.ylabel('Frequency')
    plt.title('Frequency distribution of the simulated end-of-preiod values')


################################################################
# Black_scholse Model                                          #
###############################################################

def euro_option_black_scholse(spot_price, strike, maturity, risk_free_rate, sigma, payoff, **kwargs):

    d1 = (np.log(spot_price / strike) + (risk_free_rate + 0.5 * sigma ** 2) * maturity) / (sigma * np.sqrt(maturity))
    d2 = (np.log(spot_price / strike) + (risk_free_rate - 0.5 * sigma ** 2) * maturity) / (sigma * np.sqrt(maturity))
    if payoff == "Call":
        option_value = spot_price * si.norm.cdf(d1, 0.0, 1.0) - strike * np.exp(-risk_free_rate * maturity) * si.norm.cdf(d2, 0.0, 1.0)
    elif payoff == "Put":
        option_value = - spot_price * si.norm.cdf(-d1, 0.0, 1.0) + strike * np.exp(-risk_free_rate * maturity) * si.norm.cdf(-d2, 0.0, 1.0)
    return round(option_value,2)

def run_euro_option_bs_S(data):
        payoff = data['payoff']
        maturity = data['maturity']
        S = np.linspace(10,1600,100)
        cp = np.zeros((len(S),1))
        for i in range(len(S)):
            cp[i] = euro_option_black_scholse(S[i], data['strike'], data['maturity'], data['risk_free_rate'], data['sigma'], data['payoff'] )  #TODO how to give amount to arguments what about call or put????? 

        # plotting black-scholse modle
        payoff = data['payoff']
        fig = plt.figure()
        plt.plot(S, cp, '-')
        plt.plot(S, np.maximum(S-100,0), '--')
        plt.xlabel('Crypto Price')
        plt.ylabel('Price')
        plt.title(f'European {payoff}')
        plt.legend(['Option Price',f'{payoff} at {maturity}'])
        plt.show()
        
def run_bs_sigma(data):
        sigmas = np.linspace(0.3,0.9,10)
        puts = []
        # plotting black-scholse modle- changing volotility (sigma)
        for sig in sigmas:
            put = euro_option_black_scholse(data['spot_price'], data['strike'], data['maturity'], data['risk_free_rate'], sig, data['payoff'])
            puts.append(put)
        plt.plot(sigmas, puts, label='Put Value')
        plt.xlabel('$\sigma$')
        plt.ylabel(' Value')
        plt.legend()
        plt.show()
 

def run_bs_time(data):
        time = np.linspace(0.01,1,20)
        puts = []
        # plotting black-scholse modle- changing volotility (sigma)
        for t in time:
            put = euro_option_black_scholse(data['spot_price'], data['strike'],t, data['risk_free_rate'], data['sigma'], data['payoff'])
            puts.append(put)
        plt.plot(time, puts, label='Put Value')
        plt.xlabel('Time to Maturity')
        plt.ylabel(' Value')
        plt.legend()
        plt.show()
    

################################################################
# The First Greek
#Delta
################################################################
def delta(spot_price, strike, maturity, risk_free_rate, sigma, payoff, **kwargs):   #TODO whis is the q and how determine payoff 
    
    q=0
    d1 = (np.log(spot_price / strike) + (risk_free_rate - q + 0.5 * sigma ** 2) * maturity) / (sigma * np.sqrt(maturity))
    if payoff == "Call":
        delta = np.exp(-q * maturity) * si.norm.cdf(d1, 0.0, 1.0)
    elif payoff == "Put":
        delta =  - np.exp(-q * maturity) * si.norm.cdf(-d1, 0.0, 1.0)
    
    return delta


def run_delta(data):
    S = np.linspace(1000,1500,100)
#     delta_Call = np.zeros((len(S),1))
    delta_Put = np.zeros((len(S),1))
    for i in range(len(S)): 
#         delta_Call [i] = delta(S[i], data['strike'], data['maturity'], data['risk_free_rate'], data['sigma'], 'call')
        delta_Put [i] = delta(S[i], data['strike'], data['maturity'], data['risk_free_rate'],  data['sigma'], 'Put')

    #plotting delta
    fig = plt.figure()
#     plt.plot(S, delta_Call, '-')
    plt.plot(S, delta_Put, '--')
    plt.grid()
    plt.xlabel('Crypto Price')
    plt.ylabel('Delta')
    plt.title('Delta')
    plt.legend('Delta for Put')
    plt.show()

################################################################
# The Second Greek
#Gamma
################################################################
def gamma(spot_price, strike, maturity, risk_free_rate, sigma, payoff,**kwargs):
    q=0
    d1 = (np.log(spot_price / strike) + (risk_free_rate - q + 0.5 * sigma ** 2) * maturity) / (sigma * np.sqrt(maturity))
    gamma = np.exp(- q * maturity) * si.norm.pdf(d1, 0.0, 1.0) / (sigma * spot_price * np.sqrt(maturity))
    
    return gamma

def run_gamma(data):
    S = np.linspace(1000,1500,100)
    Gamma = np.zeros((len(S),1))
    for i in range(len(S)):
        Gamma [i] = gamma(S[i], data['strike'], data['maturity'], data['risk_free_rate'], data['sigma'], payoff=data['payoff'])
    
    payoff=data['payoff']
    #plotting Gamma
    fig = plt.figure()
    plt.plot(S, Gamma, '-')
    plt.grid()
    plt.xlabel('crypto Price')
    plt.ylabel('Gamma')
    plt.title('Gamma')
    plt.legend(f'Gamma for {payoff}')

################################################################
# The Third Greek
#Speed
################################################################
def speed(spot_price, strike, maturity, risk_free_rate, sigma, payoff,**kwargs):
    q=0
    d1 = (np.log(spot_price / strike) + (risk_free_rate - q + 0.5 * sigma ** 2) * maturity) / (sigma * np.sqrt(maturity))
    speed = - np.exp(-q * maturity) * si.norm.pdf(d1, 0.0, 1.0) / ((sigma **2) * (spot_price ** 2) * np.sqrt(maturity)) * (d1 + sigma * np.sqrt(maturity))
    
    return speed

def run_speed(data):
    S = np.linspace(1000,1500,100)
    Speed = np.zeros((len(S),1))
    for i in range(len(S)):
        Speed [i] = speed(S[i], data['strike'], data['maturity'], data['risk_free_rate'], data['sigma'], payoff=data['payoff'])
    payoff = data['payoff']
    # plotting speed 
    fig = plt.figure()
    plt.plot(S, Speed, '-')
    plt.grid()
    plt.xlabel('Crypto Price')
    plt.ylabel('Speed')
    plt.title('Speed')
    plt.legend(f'Speed for {payoff}')
    plt.show()

################################################################
# The Forth Greek
#Theta
################################################################
def theta(spot_price, strike, maturity, risk_free_rate, sigma, payoff,**kwargs):
    q=0
    d1 = (np.log(spot_price / strike) + (risk_free_rate - q + 0.5 * sigma ** 2) * maturity) / (sigma * np.sqrt(maturity))
    d2 = (np.log(spot_price / strike) + (risk_free_rate - q - 0.5 * sigma ** 2) * maturity) / (sigma * np.sqrt(maturity))
    if payoff == "Call":
        theta = sigma * spot_price * np.exp(-q * maturity) * si.norm.pdf(d1, 0.0, 1.0) / (2 * np.sqrt(maturity)) - q * spot_price * np.exp(-q * maturity) * si.norm.cdf(d1, 0.0, 1.0) + risk_free_rate * strike * np.exp(-risk_free_rate * maturity) * si.norm.cdf(d2, 0.0, 1.0)
    elif payoff == "Put":
        theta = sigma * spot_price * np.exp(-q * maturity) * si.norm.pdf(-d1, 0.0, 1.0) / (2 * np.sqrt(maturity)) - q * spot_price * np.exp(-q * maturity) * si.norm.cdf(-d1, 0.0, 1.0) + risk_free_rate * strike * np.exp(-risk_free_rate * maturity) * si.norm.cdf(-d2, 0.0, 1.0)
    
    return theta

def run_theta(data):
    T = np.linspace(0.01,0.25,90)
    Theta_Call = np.zeros((len(T),1))
    Theta_Put = np.zeros((len(T),1))
    payoff =data['payoff']
    if payoff== 'Call':
        for i in range(len(T)):
                Theta_Call [i] = theta(data['spot_price'], data['strike'], T[i], data['risk_free_rate'], data['sigma'], payoff=data['payoff']) #ToDo one of them?
    elif payoff == 'Put':
        for i in range(len(T)):
            Theta_Put [i] = theta(data['spot_price'], data['strike'], T[i], data['risk_free_rate'], data['sigma'], payoff=data['payoff'])

    # plotting theta
    fig = plt.figure()
#     plt.plot(T, Theta_Call, '-')
    plt.plot(T, Theta_Put, '-')
    plt.grid()
    plt.xlabel('Time to Expiry')
    plt.ylabel('Theta')
    plt.title('Theta')
    plt.legend(f'Theta for {payoff}')
    plt.show()

################################################################
# The fifth Greek
#Rho
################################################################
def rho(spot_price, strike, maturity, risk_free_rate, sigma, payoff,**kwargs):
    q=0
    d1 = (np.log(spot_price / strike) + (risk_free_rate - q + 0.5 * sigma ** 2) * maturity) / (sigma * np.sqrt(maturity))
    d2 = (np.log(spot_price / strike) + (risk_free_rate - q - 0.5 * sigma ** 2) * maturity) / (sigma * np.sqrt(maturity))
    if payoff == "Call":
        rho =  strike * maturity * np.exp(-risk_free_rate * maturity) * si.norm.cdf(d2, 0.0, 1.0)
    elif payoff == "Put":
        rho = - strike * maturity * np.exp(-risk_free_rate * maturity) * si.norm.cdf(-d2, 0.0, 1.0)
    
    return rho

def run_rho(data):
    payoff = data['payoff']
    r = np.linspace(0.01,0.1,11)
    Rho_Call = np.zeros((len(r),1))
    Rho_Put = np.zeros((len(r),1))
    if payoff == 'Call':
        for i in range(len(r)):
            Rho_Call [i] = rho(data['spot_price'], data['strike'],data['maturity'], r[i], data['sigma'], payoff=data['payoff'])
    elif payoff == 'Put':
        for i in range(len(r)):
            Rho_Put [i] = rho(data['spot_price'], data['strike'],data['maturity'], r[i], data['sigma'], payoff=data['payoff'])

    # plotting rho
    fig = plt.figure()
#     plt.plot(r, Rho_Call, '-')
    plt.plot(r, Rho_Put, '-')
    plt.grid()
    plt.xlabel('Interest Rate')
    plt.ylabel('Rho')
    plt.title('Rho')
    plt.legend( 'Rho for Put')
    plt.show()

################################################################
# The Sixth Greek
#Vega
################################################################
def vega(spot_price, strike, maturity, risk_free_rate, sigma, payoff, **kwargs):
    q=0
    d1 = (np.log(spot_price / strike) + (risk_free_rate - q + 0.5 * sigma ** 2) * maturity) / (sigma * np.sqrt(maturity))
    vega = spot_price * np.sqrt(maturity) * np.exp(-q * maturity) * si.norm.pdf(d1, 0.0, 1.0)
    
    return vega

def run_vega(data):
    payoff = data['payoff']
    vol = np.linspace(0.4,1.5,30)
    Vega = np.zeros((len(vol),1))
    if payoff == 'Call':
        for i in range(len(vol)):
            Vega [i] = vega(data['spot_price'], data['strike'], data['maturity'], data['risk_free_rate'], vol[i], 'Call')
    elif payoff == 'Put':
        for i in range(len(vol)):
            Vega [i] = vega(data['spot_price'], data['strike'], data['maturity'], data['risk_free_rate'], vol[i], 'Put')
    # plotting vega
    fig = plt.figure()
    plt.plot(vol, Vega, '-')
    plt.grid()
    plt.xlabel('Volatility')
    plt.ylabel('Vega')
    plt.title('Vega')
    plt.legend(['Vega for Put'])
    plt.show()






def simulation_runner():
    data = preprocessing()                                      
    american_value_bin_t, european_value_bin_t = binomial_tree(**data)  
#     european_call_mcs,european_put_mcs, S =  mcs_simulation_np(**data)
    print('Executive Summey:\n',)
    print('American binomian put option value is: ', american_value_bin_t)
    print('European binomian put option value is: ', european_value_bin_t)
    print('')
#     print('European put by Monte Carlo: ', european_put_mcs)
    euro_option_bs = euro_option_black_scholse(**data)
    print('European Black-Scholse put option price: ', euro_option_bs)
    print('6 Greeks of Black-Scholse model')
    #Delta
    result_delta = round(delta(**data),3)
    print('Delta is :', result_delta)
    #Gamma
    result_gamma = round(gamma(**data),3)
    print('gamma is :', result_gamma)
    #Speed
    result_speed = round(speed(**data),6)
#     print('speed is:', result_speed)
    #Theta
    result_theta = round(theta(**data),3)
    print('theta is:', result_theta)
    #Rho
    result_rho =round(rho(**data),3)
    print('rho is:', result_rho)
    #vega
    result_vega = round(vega(**data),3)
    print('vega is:', result_vega)
    
    print('#'*100)
    print('Findings in Details ')
    # print('mcs is :', european_call_mcs,european_put_mcs )
    # run_mcs_dist(S)
    run_bs_sigma(data);
   
    print('#'*10)
    run_bs_time(data);
    run_euro_option_bs_S(data)
    # Greeks
    print('#'*60)
    print('6 Greeks of Black-Scholse model')
    #Delta
    print('Delta is :', result_delta)
    print('''Delta was calculated -0.35 (delta = -0.35), it means if  ETH-USD goes up $1, option price will decrease 0.35 USD.(current price +(-0.35))
Delta changes as the asset price changes. As shown in figure 5, by increasing asset price from $1000  to $1500, delta for put option increases from -0.45 to -0.2. rate of this changes, measured by Gamma which is described in the following.''')
    run_delta(data)
    #Gamma
    print('gamma is :', result_gamma)
    print('''In the scenario, if ETH-USD price increase $1, Delta will changed by Gamma= 0.001 from -0.35 to -0.349. As depicted below, by increasing cyrpto price the amount of Gamma increases. It means Delta grows bigger as option get more valuable. How Gamma changes when underlying asset changes is answered by Speed.''')
    run_gamma(data)
    #Speed
    print('speed is:', result_speed)
    run_speed(data)
    #Theta
    print('theta is:', result_theta)
    print('''In this calculation, Theta = 452 divided by 365 (452/365=1.24) produces Theta for each day.It means each day passes the estimated option value will decrease $1.24. However, Theta changes during time to maturity. As figures below illustrate, the closer to the expiry time, the less Theta will be.''')
    run_theta(data)
    #Rho
    print('rho is:', result_rho)
    print('''Rho for ETH-USD was calculated -151.42. It means if the risk-free interest rate increases by 1%, the option value of this crypto will decline by 1% * -151.42 = -1.51 US Dollar.
Figure below illustrates how the Rho changes if risk-free rate ingrese.''')
    run_rho(data)
    #vega
    print('vega is:', result_vega)
    print('''regardign Vega(=218) of  ETH-USD,  if volatility increase by 1% the option value will increase by 1% * 218 = $2.18. 
according figure below, increasing volatility from 40% to 70% causes Vega hits a peak, after that it starts decreasing steadly.''')
    run_vega(data)
   








simulation_runner()
